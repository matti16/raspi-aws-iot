AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template for Raspberry IoT project 

Parameters:
  Env:
    Description: Environment (dev/prod)
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
    MinLength: '1'
    MaxLength: '10'
    ConstraintDescription: must contain only alphanumberic characters
  ServiceName:
    Description: Name of the project
    Type: String
  Account:
    Type: Number
    Description: "The AWS account ID"
  Region:
    Type: String
    Description: "The AWS region"
  BucketName:
    Type: String
    Description: "The S3 Bucket"
  ImageTag:
    Type: String
    Description: "The docker image tag to use"

Resources:  
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub "${ServiceName}-api"
  
  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaDispatcher.Arn
      ResourceId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayRootMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Env

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaDispatcher.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${Env}/*

  LambdaDispatcher:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-lambda-${Env}"
      Role: !GetAtt LambdaRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Sub "${Account}.dkr.ecr.${Region}.amazonaws.com/bmattia/${ServiceName}:${ImageTag}"
      ImageConfig:
        Command: ["handlers.handler"]
        EntryPoint: ["/lambda-entrypoint.sh"]
        WorkingDirectory: "/var/task/"
      Environment:
        Variables:
          REGION: !Sub "${Region}"
          IOT_TOPIC: !Sub "${ServiceName}/${Env}"

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: !Sub "${ServiceName}-role-${Env}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::${Account}:policy/${ServiceName}-policy-${Env}"
  
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${BucketName}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Env}
  
  StaticS3WebsiteURL:
    Value: !GetAtt
      - S3Bucket
      - WebsiteURL
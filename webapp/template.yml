AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template for Raspberry IoT project 

Parameters:
  Env:
    Description: Environment (dev/prod)
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
    MinLength: '1'
    MaxLength: '10'
    ConstraintDescription: must contain only alphanumberic characters
  ServiceName:
    Description: Name of the project
    Type: String
  Account:
    Type: Number
    Description: "The AWS account ID"
  Region:
    Type: String
    Description: "The AWS region"
  BucketName:
    Type: String
    Description: "The S3 Bucket"
  ImageTag:
    Type: String
    Description: "The docker image tag to use"

Resources:  
  CognitoUsers:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${ServiceName}-user-pool-${Env}"
      UsernameConfiguration:
        CaseSensitive: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email
  
  ClientAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUsers
      ClientName: !Sub "${ServiceName}-client-app-${Env}"
      GenerateSecret: false
      RefreshTokenValidity: 30
      CallbackURLs: 
        - !Join [ '', [ 'https://', !GetAtt CloudFrontDistribution.DomainName ] ] 
      AllowedOAuthFlows:
        - code
        - implicit
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  AuthDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUsers
      Domain: !Sub "${ServiceName}-pool-domain-${Env}"

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Sub "${ServiceName}-api-${Env}"

  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.authorization
      Name: CognitoAuthorizer
      ProviderARNs:
        - Fn::GetAtt:
            - CognitoUsers
            - Arn
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
  
  ApiGatewayProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt 
        - ApiGateway
        - RootResourceId
      PathPart: "{proxy+}"

  ApiGatewayProxyMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaDispatcher.Arn

  ApiGatewayProxyMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaDispatcher.Arn
  
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayProxyMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Env

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaDispatcher.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*

  LambdaDispatcher:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-lambda-${Env}"
      Role: !GetAtt LambdaRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Sub "${Account}.dkr.ecr.${Region}.amazonaws.com/${ServiceName}:${ImageTag}"
      ImageConfig:
        Command: ["app.handler"]
        EntryPoint: ["/lambda-entrypoint.sh"]
        WorkingDirectory: "/var/task/"
      Environment:
        Variables:
          REGION: !Sub "${Region}"
          IOT_TOPIC: !Sub "${ServiceName}/${Env}/cmd"

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: !Sub "${ServiceName}-role-${Env}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::${Account}:policy/${ServiceName}-policy-${Env}"
  
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${BucketName}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: 
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket
  
  S3BucketData:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ServiceName}-data-${Env}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldCameraData
            Prefix: camera/history/
            Status: Enabled
            ExpirationInDays: 14
  
  CameraTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub "mattiot_camera_${Env}"
      TopicRulePayload:
        RuleDisabled: false
        Sql: !Sub "SELECT * FROM '${ServiceName}/${Env}/camera/#'"
        Actions:
        - S3:
            BucketName: !Ref S3BucketData
            RoleArn:
              Fn::GetAtt:
              - LambdaRole
              - Arn
            Key: camera/latest/${topic(4)}/latest.jpg
        - S3:
            BucketName: !Ref S3BucketData
            RoleArn:
              Fn::GetAtt:
              - LambdaRole
              - Arn
            Key: camera/history/${topic(4)}/${timestamp()}.jpg

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: matti-iot cloudfront OAI

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub "${BucketName}.s3.amazonaws.com"
          Id: S3Origin 
          S3OriginConfig:
            OriginAccessIdentity: !Join [ '/', [ 'origin-access-identity', 'cloudfront', !Ref  CloudFrontOriginAccessIdentity] ]
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
        PriceClass: PriceClass_100
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - IT
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Env}
  
  StaticS3WebsiteURL:
    Value: !GetAtt
      - S3Bucket
      - WebsiteURL
  
  DnsEndpoint:
    Value: !GetAtt CloudFrontDistribution.DomainName
  DnsHostname:
    Value: !Join [ '', [ 'https://', !GetAtt CloudFrontDistribution.DomainName ] ] 

  UserPoolUrl:
    Description: URL of the Cognito provider
    Value:
      Fn::GetAtt:
        - CognitoUsers
        - ProviderURL